/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */

SELECT name 
FROM Facilities 
WHERE membercost > 0;

/* Q2: How many facilities do not charge a fee to members? */

SELECT count(name) 
FROM Facilities 
WHERE membercost = 0;

/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */

SELECT facid, name, membercost, monthlymaintenance 
FROM Facilities 
WHERE membercost < 0.2 * monthlymaintenance AND membercost >0;

/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */

SELECT * 
FROM Facilities 
WHERE facid in (1,5);

/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */

SELECT name, monthlymaintenance, CASE WHEN monthlymaintenance > 100 THEN 'expensive' ELSE 'cheap' END AS expense  
FROM Facilities;

/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */

SELECT surname, firstname, MAX(joindate) AS date 
FROM Members 
WHERE surname NOT LIKE 'Guest';

/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

SELECT DISTINCT CONCAT( firstname, ' ', surname ) AS full_name, Facilities.name
FROM Bookings
INNER JOIN Facilities ON Bookings.facid = Facilities.facid
INNER JOIN Members ON Bookings.memid = Members.memid
WHERE name LIKE 'Tennis%'
ORDER BY full_name;

/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

SELECT DISTINCT CONCAT( firstname, ' ', surname ) AS full_name, Facilities.name,
	CASE WHEN Bookings.memid = 0 THEN guestcost*slots
	ELSE membercost*slots END AS cost
FROM Bookings
INNER JOIN Facilities ON Bookings.facid = Facilities.facid
INNER JOIN Members ON Bookings.memid = Members.memid
WHERE cast(starttime as date) = cast('2012-09-14' as date) 
	AND (CASE WHEN Bookings.memid = 0 THEN guestcost*slots
	ELSE membercost*slots END) >= 30.0
ORDER BY cost DESC;

/* Q9: This time, produce the same result as in Q8, but using a subquery. */
SELECT full_name, Facility, cost
FROM (SELECT DISTINCT CONCAT( firstname, ' ', surname ) AS full_name, Facilities.name AS Facility,
	CASE WHEN Bookings.memid = 0 THEN guestcost*slots
	ELSE membercost*slots END AS cost
	FROM Bookings
	INNER JOIN Facilities ON Bookings.facid = Facilities.facid
	INNER JOIN Members ON Bookings.memid = Members.memid
	WHERE cast(starttime as date) = cast('2012-09-14' as date)) AS subquerry
WHERE cost >= 30.0
ORDER BY cost DESC;
